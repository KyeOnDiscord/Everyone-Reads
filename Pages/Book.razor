@using Microsoft.AspNetCore.Components;
@using EveryoneReads.Backend
@using System.Globalization
@inject IJSRuntime JS
@page "/book"

<style>
    body {
        background: linear-gradient(320deg, rgba(155,234,255,1) 0%, rgba(101,61,255,1) 0%, rgba(162,139,255,1) 100%);
    }
</style>
<button type="button" class="btn btn-primary" @onclick=GoBack>Back</button>
@if (curBook != null)
{
    <PageTitle>@curBook.Title | Everyone Reads </PageTitle>

    <div class="container">
        <div class="row">
            <div class="col">
                <div class="col">
                    <div class="bookcontainer">
                        <div class="book">
                            <div class="front">
                                <div class="cover">
                                    <img src=@curBook.CoverURL>
                                </div>
                            </div>
                            <div class="left-side">
                                <img src="/BookSpine.png">
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col">
                <h1 class="text-white"><b>@curBook.Title</b></h1>
                <h4 class="text-white">
                    By: @string.Join(",",@curBook.Authors)
                    <br>
                    <br>
                    Pages: @curBook.PageCount
                    <br>
                    Published: @curBook.PublishDate
                    <br>
                    Publisher: @curBook.Publisher
                    <br>
                    ISBN-13: @curBook.ISBN13
                    <br>
                    Language: @GetCultureFromTwoLetterCountryCode(@curBook.Language)

                </h4>
            </div>

        </div>


    </div>
}
@code {
    ///{BookISBN}
    public string BookISBN { get; set; }

    private BookObj curBook { get; set; } = null;

    [Inject]

    public NavigationManager NavMan { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        string googleBooksID = GetQueryParm("google");
        string isbn = GetQueryParm("isbn");

        if (!string.IsNullOrEmpty(googleBooksID))
        {
            BookObj[] book = await BookObj.GetBook(googleBooksID);
            if (book != null && book.Length > 0)
                curBook = book.First(x => x.GoogleBooksID == googleBooksID);
        }
        else if (!string.IsNullOrEmpty(isbn))
        {
            BookObj[] book = await BookObj.GetBook(isbn, 1);
            if (book != null && book.Length > 0)
                curBook = book[0];
        }


    }

    string GetQueryParm(string parmName)
    {
        var uriBuilder = new UriBuilder(NavMan.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    //https://stackoverflow.com/a/43425576/12897035
    public static string GetCultureFromTwoLetterCountryCode(string twoLetterISOCountryCode)
    {
        return new CultureInfo(twoLetterISOCountryCode).EnglishName;
    }
}