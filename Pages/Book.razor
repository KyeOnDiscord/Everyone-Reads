@using Microsoft.AspNetCore.Components;
@using EveryoneReads.Backend
@using System.Globalization
@using System.Web;
@inject IJSRuntime JS
@page "/book"

<style>
    body {
        background: linear-gradient(320deg, rgba(155,234,255,1) 0%, rgba(101,61,255,1) 0%, rgba(162,139,255,1) 100%);
    }
</style>
<button type="button" class="btn btn-primary" @onclick=GoBack>Back</button>
@if (curBook != null)
{
    <PageTitle>@curBook.Title | Everyone Reads </PageTitle>
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="col">
                    <div class="bookcontainer">
                        <div class="book">
                            <div class="front">
                                <div class="cover">
                                    <img src=@curBook.CoverURL>
                                </div>
                            </div>
                            <div class="left-side">
                                @if (Debug)
                                {
                                    <img src="/BookSpine.png">
                                }
                                else
                                {
                                    <img src="Everyone/BookSpine.png">
                                }



                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col">
                <h1 class="text-white"><b>@curBook.Title</b></h1>
                <h4 class="text-white">
                    By: @string.Join(",",@curBook.Authors)
                    <br>
                    <br>
                    Categories: @string.Join(",",@curBook.Categories)
                    <br>
                    Pages: @curBook.PageCount
                    <br>
                    Published: @curBook.PublishDate
                    <br>
                    Publisher: @curBook.Publisher
                    <br>
                    ISBN-13: @curBook.ISBN13
                    <br>
                    Language: @Util.GetLanguageList().First(x => x.Alpha2.Equals(curBook.Language)).Name
                </h4>
            </div>
        </div>
        <div class="container-fluid rounded" style="background-color:#A28BFF">
            <br>
            <h3 class="text-white" style="font-family:Roboto">More by @string.Join(",",@curBook.Authors)</h3>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <p></p>
        </div>
    </div>
}
@code {
    public string BookISBN { get; set; }
    private BookObj curBook { get; set; } = null;
#if DEBUG
    private bool Debug = true;
#else
    private bool Debug = false;
#endif

    [Inject]

    public NavigationManager NavMan { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        string googleBooksID = GetQueryParm("google");
        string isbn = GetQueryParm("isbn");

        if (!string.IsNullOrEmpty(googleBooksID))
        {
            curBook = await BookObj.GetBookByID(googleBooksID);
        }
        else if (!string.IsNullOrEmpty(isbn))
        {
            curBook = await BookObj.GetBookByISBN(isbn);
        }
    }

    string GetQueryParm(string parmName)
    {
        var uriBuilder = new UriBuilder(NavMan.Uri);
        var q = HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }
}