@page "/search"
@using EveryoneReads.Backend
@inject NavigationManager NavMan
<PageTitle>Search Books | Everyone Reads </PageTitle>


<style>
    body {
        background: linear-gradient(320deg, rgba(155,234,255,1) 0%, rgba(101,61,255,1) 0%, rgba(162,139,255,1) 100%);
    }
</style>

<h3 style="color:white">Search Books</h3>

<input @bind="SearchString" @onkeydown="@Enter" type="search" placeholder="Search by title, author, publisher or ISBN 10/13" size="100" />
<br />
<br />
<input @bind="MatchExact" type="checkbox"> <span style="color:white">Match Exact Title</span>
<br />
<br />
@if (IsSearching)
{
<span style="color:white">Searching far and wide for @SearchString</span> 

<svg style="fill:white" width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z"><animateTransform attributeName="transform" type="rotate" dur="0.75s" values="0 12 12;360 12 12" repeatCount="indefinite"/></path></svg>
<br />
<br />
}

<button type="button" class="btn btn-primary" @onclick=Searchbtn>Search</button>



@if (SearchResults != null)
{
    <br />
    <br />
    <span style="color:white">@SearchResults.Count() results found</span>
    <br />
    <div class="row row-cols-1 row-cols-sm-4 g-2">
        @foreach (var book in SearchResults)
        {
            @if (MatchExact)
            {
                if (!book.Title.ToLower().Contains(SearchString.ToLower()))
                {
                    continue;
                }
            }
            <div class="col">
                <div class="card">
                    <div class="card-header">@book.Title</div>
                    <div class="card-body">
                        <div class="container" style="height:200px">

                            <div class="row">
                                <div class="col-6">
                                    <img @onclick="@(e => NavigateTo(@book.GoogleBooksID))" src="@book.CoverURL" class="card-img-top img-fluid" alt="@book.Title's cover" style="height:80%;width:auto;object-fit:fill;cursor:pointer">
                                </div>
                                <div class="col">
                                    <p>
                                        Publisher: @book.Publisher
                                        <br>
                                        Authors: @string.Join(",",@book.Authors)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer text-muted">
                        Published: @book.PublishDate
                    </div>
                </div>
            </div>
        }

    </div>

}

@code {

    private static BookObj[] SearchResults = null;

    private string? SearchString { get; set; }
    private bool MatchExact { get; set; } = false;
    private bool IsSearching = false;

    private async Task Searchbtn()
    {
        if (IsSearching == false && !string.IsNullOrEmpty(SearchString))
        {
            IsSearching = true;
            SearchResults = null;//Make the search results null while getting the dataa
            SearchResults = await BookObj.GetBook(SearchString);
            if (SearchResults == null)
                SearchResults = new BookObj[] { };

            await InvokeAsync(StateHasChanged);
            IsSearching = false;
        }

    }
    private async Task NavigateTo(string googleBooksID)
    {
        NavMan.NavigateTo(NavMan.BaseUri + "book?google=" + googleBooksID);
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (IsSearching == false && e.Type == "keydown")
        {
            if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                await Searchbtn();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
